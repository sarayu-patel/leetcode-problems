leetcode -226
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def invertTree(self, root: TreeNode) -> TreeNode:
        if root is None:
            return None

        root.left, root.right = root.right, root.left
        
    
        self.invertTree(root.left)
        self.invertTree(root.right)
        
        return root



root = TreeNode(4)
root.left = TreeNode(2)
root.right = TreeNode(7)
root.left.left = TreeNode(1)
root.left.right = TreeNode(3)
root.right.left = TreeNode(6)
root.right.right = TreeNode(9)


solution = Solution()
inverted_root = solution.invertTree(root)


from collections import deque

def print_tree(root):
    if not root:
        return "Tree is empty"
    
    result = []
    queue = deque([root])
    
    while queue:
        node = queue.popleft()
        if node:
            result.append(node.val)
            queue.append(node.left)
            queue.append(node.right)
        else:
            result.append(None)
    
    
    while result and result[-1] is None:
        result.pop()
    
    return result


print(print_tree(inverted_root))
